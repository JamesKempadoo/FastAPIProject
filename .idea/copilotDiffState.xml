<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.env.example">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.env.example" />
              <option name="updatedContent" value="# Example environment variables for FastAPIProject&#10;MONGODB_URI=mongodb://localhost:27017&#10;DB_NAME=fastapi_db&#10;# Add other secrets or config as needed&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/help.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/help.md" />
              <option name="originalContent" value="# FastAPIProject Setup Guide&#10;&#10;This guide explains how to install and run the FastAPIProject on your local machine.&#10;&#10;## Prerequisites&#10;- Python 3.8 or newer&#10;- pip (Python package manager)&#10;&#10;### How to Install Python and pip&#10;&#10;1. **Download Python**&#10;   - Go to the official Python website: https://www.python.org/downloads/&#10;   - Download the latest version for your operating system (Windows, macOS, or Linux).&#10;&#10;2. **Install Python**&#10;   - Run the installer and follow the instructions.&#10;   - On Windows, make sure to check the box that says &quot;Add Python to PATH&quot; during installation.&#10;&#10;3. **Verify Python and pip Installation**&#10;   - Open a terminal (Command Prompt or PowerShell on Windows).&#10;   - Check Python version:&#10;     ```bash&#10;     python --version&#10;     ```&#10;   - Check pip version:&#10;     ```bash&#10;     pip --version&#10;     ```&#10;   - If both commands show a version number, Python and pip are installed correctly.&#10;&#10;## Installation Steps&#10;&#10;1. **Clone or Download the Repository**&#10;   - Download the project files or clone the repository to your local machine.&#10;&#10;2. **Navigate to the Project Directory**&#10;   - Open a terminal and change to the project folder:&#10;     ```bash&#10;     cd path/to/FastAPIProject&#10;     ```&#10;&#10;3. **Install Dependencies**&#10;   - Install required Python packages using pip:&#10;     ```bash&#10;     pip install -r requirements.txt&#10;     ```&#10;&#10;## Running the FastAPI Application&#10;&#10;1. **Start the Server**&#10;   - Run the following command in your terminal:&#10;     ```bash&#10;     uvicorn src.fastapiproject.main:app --reload&#10;     ```&#10;   - The server will start at `http://127.0.0.1:8000/`&#10;&#10;2. **Access the API Documentation**&#10;   - Open your browser and go to:&#10;     - Swagger UI: [http://127.0.0.1:8000/docs](http://127.0.0.1:8000/docs)&#10;     - ReDoc: [http://127.0.0.1:8000/redoc](http://127.0.0.1:8000/redoc)&#10;&#10;## Running Tests&#10;&#10;1. **Run the Tests**&#10;   - In your terminal, execute:&#10;     ```bash&#10;     pytest tests/test_main.py&#10;     ```&#10;   - This will run all tests in the tests/test_main.py file and show the results.&#10;&#10;## Manual API Testing with test_main.http&#10;&#10;This project includes a test_main.http file for manual API testing. You can use this file with the [REST Client extension for VS Code](https://marketplace.visualstudio.com/items?itemName=humao.rest-client) or other compatible tools to send HTTP requests directly to your FastAPI server and view responses.&#10;&#10;Example requests in test_main.http:&#10;- `GET http://127.0.0.1:8000/` — Checks if the server is running.&#10;- `GET http://127.0.0.1:8000/hello/User` — Example endpoint for greeting a user (if implemented).&#10;&#10;To use:&#10;1. Open test_main.http in VS Code.&#10;2. Install the REST Client extension.&#10;3. Click the 'Send Request' link above each request to test your API endpoints interactively.&#10;&#10;This is useful for quickly verifying endpoint responses and debugging your API during development.&#10;&#10;" />
              <option name="updatedContent" value="# FastAPIProject Setup Guide&#10;&#10;This guide explains how to install and run the FastAPIProject on your local machine.&#10;&#10;## Prerequisites&#10;- Python 3.8 or newer&#10;- pip (Python package manager)&#10;&#10;### How to Install Python and pip&#10;&#10;1. **Download Python**&#10;   - Go to the official Python website: https://www.python.org/downloads/&#10;   - Download the latest version for your operating system (Windows, macOS, or Linux).&#10;&#10;2. **Install Python**&#10;   - Run the installer and follow the instructions.&#10;   - On Windows, make sure to check the box that says &quot;Add Python to PATH&quot; during installation.&#10;&#10;3. **Verify Python and pip Installation**&#10;   - Open a terminal (Command Prompt or PowerShell on Windows).&#10;   - Check Python version:&#10;     ```bash&#10;     python --version&#10;     ```&#10;   - Check pip version:&#10;     ```bash&#10;     pip --version&#10;     ```&#10;   - If both commands show a version number, Python and pip are installed correctly.&#10;&#10;## Installation Steps&#10;&#10;1. **Clone or Download the Repository**&#10;   - Download the project files or clone the repository to your local machine.&#10;&#10;2. **Navigate to the Project Directory**&#10;   - Open a terminal and change to the project folder:&#10;     ```bash&#10;     cd path/to/FastAPIProject&#10;     ```&#10;&#10;3. **Install Dependencies**&#10;   - Install required Python packages using pip:&#10;     ```bash&#10;     pip install -r requirements.txt&#10;     ```&#10;&#10;## Running the FastAPI Application&#10;&#10;1. **Start the Server**&#10;   - Run the following command in your terminal:&#10;     ```bash&#10;     uvicorn src.fastapiproject.main:app --reload&#10;     ```&#10;   - The server will start at `http://127.0.0.1:8000/`&#10;&#10;2. **Access the API Documentation**&#10;   - Open your browser and go to:&#10;     - Swagger UI: [http://127.0.0.1:8000/docs](http://127.0.0.1:8000/docs)&#10;     - ReDoc: [http://127.0.0.1:8000/redoc](http://127.0.0.1:8000/redoc)&#10;&#10;## Running Tests&#10;&#10;1. **Run the Tests**&#10;   - In your terminal, execute:&#10;     ```bash&#10;     pytest tests/test_main.py&#10;     ```&#10;   - This will run all tests in the tests/test_main.py file and show the results.&#10;&#10;## Manual API Testing with test_main.http&#10;&#10;This project includes a test_main.http file for manual API testing. You can use this file with the [REST Client extension for VS Code](https://marketplace.visualstudio.com/items?itemName=humao.rest-client) or other compatible tools to send HTTP requests directly to your FastAPI server and view responses.&#10;&#10;Example requests in test_main.http:&#10;- `GET http://127.0.0.1:8000/` — Checks if the server is running.&#10;- `GET http://127.0.0.1:8000/hello/User` — Example endpoint for greeting a user (if implemented).&#10;&#10;To use:&#10;1. Open test_main.http in VS Code.&#10;2. Install the REST Client extension.&#10;3. Click the 'Send Request' link above each request to test your API endpoints interactively.&#10;&#10;This is useful for quickly verifying endpoint responses and debugging your API during development.&#10;&#10;## MongoDB Integration&#10;This project uses MongoDB as its database for storing and retrieving customer and product data. All CRUD operations for these resources are performed using MongoDB, providing persistent and scalable data storage.&#10;&#10;### How MongoDB is Used&#10;- The MongoDB connection is managed in `src/fastapiproject/db.py` using the async Motor driver.&#10;- The connection URI is loaded from an environment variable (`MONGODB_URI`) or a `.env` file for security and flexibility.&#10;- Each API router (for customers and products) interacts with MongoDB collections using async methods for high performance.&#10;- Data is validated and serialized using Pydantic models before being stored or returned.&#10;&#10;### Setting Up MongoDB&#10;1. **Install and Start MongoDB**&#10;   - Download and install MongoDB from [mongodb.com](https://www.mongodb.com/try/download/community).&#10;   - Start the MongoDB server locally or use a cloud-hosted MongoDB instance.&#10;&#10;2. **Configure the Connection**&#10;   - Create a `.env` file in your project root with:&#10;     ```&#10;     MONGODB_URI=mongodb://localhost:27017&#10;     ```&#10;   - Update the URI if using a remote or cloud MongoDB.&#10;&#10;3. **Install Motor and python-dotenv**&#10;   - These are listed in `requirements.txt` and should be installed with:&#10;     ```&#10;     pip install -r requirements.txt&#10;     ```&#10;&#10;### How Data Flows&#10;- When you create, update, or delete a customer or product, the API endpoints interact directly with MongoDB collections.&#10;- All queries and updates are performed asynchronously for scalability.&#10;- The database name defaults to `fastapi_db` but can be changed in the code or via environment variables.&#10;&#10;### Benefits&#10;- **Persistence:** Data is not lost when the server restarts.&#10;- **Scalability:** MongoDB can handle large datasets and concurrent requests.&#10;- **Security:** Connection details are managed via environment variables, not hardcoded.&#10;&#10;## Notes&#10;- This project uses an in-memory database, so data will be lost when the server restarts.&#10;- For production use, consider integrating a persistent database.&#10;&#10;## What is FastAPI?&#10;FastAPI is a modern, fast (high-performance) web framework for building APIs with Python 3.7+ based on standard Python type hints. It is designed for building robust and scalable RESTful APIs quickly and easily, with automatic data validation, interactive documentation, and support for asynchronous programming. FastAPI is widely used in commercial and open-source projects for its speed, ease of use, and automatic generation of OpenAPI and JSON Schema documentation.&#10;&#10;## Models Used in This Project&#10;&#10;### Customer Model&#10;Represents a customer with the following fields:&#10;- `id` (Optional[str]): Unique identifier for the customer, generated by the server.&#10;- `name` (str): The customer's name.&#10;- `email` (str): The customer's email address.&#10;&#10;### Product Model&#10;Represents a product with the following fields:&#10;- `id` (Optional[str]): Unique identifier for the product, generated by the server.&#10;- `name` (str): The product's name.&#10;- `description` (str): A description of the product.&#10;- `price` (float): The price of the product.&#10;&#10;Both models use Pydantic for data validation and serialization, ensuring that incoming and outgoing data matches the expected structure and types.&#10;&#10;## References and Tutorials for Beginners&#10;- [FastAPI Official Tutorial](https://fastapi.tiangolo.com/tutorial/): The official step-by-step guide to building APIs with FastAPI.&#10;- [FastAPI Crash Course (YouTube)](https://www.youtube.com/watch?v=0sOvCWFmrtA): A video introduction to FastAPI for beginners.&#10;- [Real Python: FastAPI Basics](https://realpython.com/fastapi-python-web-apis/): A beginner-friendly article explaining FastAPI concepts and usage.&#10;- [Test-Driven Development with FastAPI](https://testdriven.io/blog/fastapi-crud/): A practical guide to building and testing CRUD APIs with FastAPI.&#10;- [Pydantic Documentation](https://docs.pydantic.dev/latest/): Learn about data validation and serialization in FastAPI using Pydantic models.&#10;- [VS Code REST Client Extension](https://marketplace.visualstudio.com/items?itemName=humao.rest-client): How to use the REST Client extension for testing your API endpoints from VS Code.&#10;&#10;---&#10;For further help, refer to the FastAPI documentation: https://fastapi.tiangolo.com/" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/main.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/main.py" />
              <option name="originalContent" value="from fastapi import FastAPI, HTTPException, Path&#10;from pydantic import BaseModel&#10;from typing import List, Optional&#10;import uuid&#10;&#10;app = FastAPI()&#10;&#10;# In-memory store for demo purposes&#10;customers = {}&#10;&#10;class Customer(BaseModel):&#10;    id: Optional[str]&#10;    name: str&#10;    email: str&#10;&#10;@app.post(&quot;/customers&quot;, response_model=Customer, status_code=201)&#10;def create_customer(customer: Customer):&#10;    customer_id = customer.id or str(uuid.uuid4())&#10;    customer.id = customer_id&#10;    customers[customer_id] = customer.model_dump()&#10;    return customer&#10;&#10;@app.get(&quot;/customers&quot;, response_model=List[Customer])&#10;def get_all_customers():&#10;    return list(map(Customer.model_validate, customers.values()))&#10;&#10;@app.get(&quot;/customers/{id}&quot;, response_model=Customer)&#10;def get_customer_by_id(id: str = Path(...)):&#10;    customer = customers.get(id)&#10;    if not customer:&#10;        raise HTTPException(status_code=404, detail=&quot;Customer not found&quot;)&#10;    return Customer.model_validate(customer)&#10;&#10;@app.put(&quot;/customers/{id}&quot;, response_model=Customer)&#10;def update_customer(id: str, customer: Customer):&#10;    if id not in customers:&#10;        raise HTTPException(status_code=404, detail=&quot;Customer not found&quot;)&#10;    customer.id = id&#10;    customers[id] = customer.model_dump()&#10;    return customer&#10;&#10;@app.delete(&quot;/customers/{id}&quot;, status_code=204)&#10;def delete_customer(id: str):&#10;    if id not in customers:&#10;        raise HTTPException(status_code=404, detail=&quot;Customer not found&quot;)&#10;    del customers[id]" />
              <option name="updatedContent" value="# Import necessary modules from FastAPI and Pydantic&#10;from fastapi import FastAPI, HTTPException, Path&#10;from pydantic import BaseModel&#10;from typing import List, Optional&#10;import uuid&#10;&#10;# Create a FastAPI app instance&#10;app = FastAPI()&#10;&#10;# In-memory dictionary to store customer data&#10;customers = {}&#10;&#10;# Define a Pydantic model for Customer&#10;class Customer(BaseModel):&#10;    id: Optional[str]  # Customer ID, optional on creation&#10;    name: str          # Customer name&#10;    email: str         # Customer email&#10;&#10;# Endpoint to create a new customer&#10;@app.post(&quot;/customers&quot;, response_model=Customer, status_code=201)&#10;def create_customer(customer: Customer):&#10;    customer_id = customer.id or str(uuid.uuid4())  # Generate a unique ID if not provided&#10;    customer.id = customer_id  # Assign the ID to the customer object&#10;    customers[customer_id] = customer.model_dump()  # Store customer data in the dictionary&#10;    return customer  # Return the created customer&#10;&#10;# Endpoint to get all customers&#10;@app.get(&quot;/customers&quot;, response_model=List[Customer])&#10;def get_all_customers():&#10;    return list(map(Customer.model_validate, customers.values()))  # Return all customers as a list&#10;&#10;# Endpoint to get a customer by ID&#10;@app.get(&quot;/customers/{id}&quot;, response_model=Customer)&#10;def get_customer_by_id(id: str = Path(...)):&#10;    customer = customers.get(id)  # Retrieve customer from the dictionary&#10;    if not customer:&#10;        raise HTTPException(status_code=404, detail=&quot;Customer not found&quot;)  # Raise error if not found&#10;    return Customer.model_validate(customer)  # Return the customer data&#10;&#10;# Endpoint to update a customer by ID&#10;@app.put(&quot;/customers/{id}&quot;, response_model=Customer)&#10;def update_customer(id: str, customer: Customer):&#10;    if id not in customers:&#10;        raise HTTPException(status_code=404, detail=&quot;Customer not found&quot;)  # Raise error if not found&#10;    customer.id = id  # Ensure the customer ID matches the path&#10;    customers[id] = customer.model_dump()  # Update the customer data&#10;    return customer  # Return the updated customer&#10;&#10;# Endpoint to delete a customer by ID&#10;@app.delete(&quot;/customers/{id}&quot;, status_code=204)&#10;def delete_customer(id: str):&#10;    if id not in customers:&#10;        raise HTTPException(status_code=404, detail=&quot;Customer not found&quot;)  # Raise error if not found&#10;    del customers[id]  # Remove the customer from the dictionary&#10;# No return needed for 204 status code" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/fastapiproject/model/customer_create.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/fastapiproject/model/customer_create.py" />
              <option name="updatedContent" value="from pydantic import BaseModel&#10;&#10;class CustomerCreate(BaseModel):&#10;    name: str&#10;    email: str&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/fastapiproject/model/models.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/fastapiproject/model/models.py" />
              <option name="originalContent" value="from pydantic import BaseModel&#10;from typing import Optional&#10;&#10;class CustomerCreate(BaseModel):&#10;    name: str&#10;    email: str&#10;&#10;class Customer(BaseModel):&#10;    id: Optional[str]&#10;    name: str&#10;    email: str&#10;&#10;" />
              <option name="updatedContent" value="from pydantic import BaseModel&#10;from typing import Optional&#10;&#10;class Customer(BaseModel):&#10;    id: Optional[str]&#10;    name: str&#10;    email: str" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/fastapiproject/model/product_create.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/fastapiproject/model/product_create.py" />
              <option name="updatedContent" value="from pydantic import BaseModel&#10;&#10;class ProductCreate(BaseModel):&#10;    name: str&#10;    description: str&#10;    price: float&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/fastapiproject/models.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/fastapiproject/models.py" />
              <option name="updatedContent" value="from pydantic import BaseModel&#10;from typing import Optional&#10;&#10;class CustomerCreate(BaseModel):&#10;    name: str&#10;    email: str&#10;&#10;class Customer(BaseModel):&#10;    id: Optional[str]&#10;    name: str&#10;    email: str&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test_main.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test_main.py" />
              <option name="updatedContent" value="import pytest&#10;from fastapi.testclient import TestClient&#10;from main import app&#10;&#10;client = TestClient(app)&#10;&#10;# Helper function to create a customer&#10;def create_customer(name, email):&#10;    response = client.post(&quot;/customers&quot;, json={&quot;name&quot;: name, &quot;email&quot;: email})&#10;    assert response.status_code == 201&#10;    return response.json()&#10;&#10;# Test creating a customer&#10;def test_create_customer():&#10;    customer = create_customer(&quot;Alice&quot;, &quot;alice@example.com&quot;)&#10;    assert customer[&quot;name&quot;] == &quot;Alice&quot;&#10;    assert customer[&quot;email&quot;] == &quot;alice@example.com&quot;&#10;    assert &quot;id&quot; in customer&#10;&#10;# Test getting all customers&#10;def test_get_all_customers():&#10;    create_customer(&quot;Bob&quot;, &quot;bob@example.com&quot;)&#10;    response = client.get(&quot;/customers&quot;)&#10;    assert response.status_code == 200&#10;    customers = response.json()&#10;    assert isinstance(customers, list)&#10;    assert any(c[&quot;name&quot;] == &quot;Bob&quot; for c in customers)&#10;&#10;# Test getting a customer by ID&#10;def test_get_customer_by_id():&#10;    customer = create_customer(&quot;Charlie&quot;, &quot;charlie@example.com&quot;)&#10;    response = client.get(f&quot;/customers/{customer['id']}&quot;)&#10;    assert response.status_code == 200&#10;    data = response.json()&#10;    assert data[&quot;name&quot;] == &quot;Charlie&quot;&#10;&#10;# Test updating a customer&#10;def test_update_customer():&#10;    customer = create_customer(&quot;Dave&quot;, &quot;dave@example.com&quot;)&#10;    response = client.put(f&quot;/customers/{customer['id']}&quot;, json={&quot;name&quot;: &quot;David&quot;, &quot;email&quot;: &quot;david@example.com&quot;})&#10;    assert response.status_code == 200&#10;    updated = response.json()&#10;    assert updated[&quot;name&quot;] == &quot;David&quot;&#10;    assert updated[&quot;email&quot;] == &quot;david@example.com&quot;&#10;&#10;# Test deleting a customer&#10;def test_delete_customer():&#10;    customer = create_customer(&quot;Eve&quot;, &quot;eve@example.com&quot;)&#10;    response = client.delete(f&quot;/customers/{customer['id']}&quot;)&#10;    assert response.status_code == 204&#10;    # Ensure customer is deleted&#10;    response = client.get(f&quot;/customers/{customer['id']}&quot;)&#10;    assert response.status_code == 404&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/tests/test_product_router.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tests/test_product_router.py" />
              <option name="originalContent" value="import sys&#10;import asyncio&#10;if sys.platform.startswith(&quot;win&quot;):&#10;    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())&#10;&#10;import pytest&#10;import asyncio&#10;from httpx import AsyncClient, ASGITransport&#10;from unittest.mock import AsyncMock, patch&#10;from fastapiproject.main import app&#10;&#10;@pytest.fixture&#10;def anyio_backend():&#10;    return 'asyncio'&#10;&#10;@pytest.fixture&#10;def mock_db():&#10;    mock_collection = AsyncMock()&#10;    mock_collection.insert_one = AsyncMock(return_value=None)&#10;    mock_collection.find = AsyncMock()&#10;    mock_db = {&quot;products&quot;: mock_collection}&#10;    return mock_db&#10;&#10;@pytest.mark.anyio&#10;@patch(&quot;fastapiproject.routers.product_router.get_database&quot;)&#10;async def test_create_product(mock_get_db, mock_db):&#10;    mock_get_db.return_value = mock_db&#10;    product_data = {&#10;        &quot;name&quot;: &quot;John Doe&quot;,&#10;        &quot;description&quot;: &quot;A sample product&quot;,&#10;        &quot;price&quot;: 9.99&#10;    }&#10;    transport = ASGITransport(app=app)&#10;    async with AsyncClient(transport=transport, base_url=&quot;http://test&quot;) as ac:&#10;        response = await ac.post(&quot;/products&quot;, json=product_data)&#10;    assert response.status_code == 201&#10;    data = response.json()&#10;    assert data[&quot;name&quot;] == product_data[&quot;name&quot;]&#10;    assert &quot;id&quot; in data&#10;&#10;@pytest.mark.anyio&#10;@patch(&quot;fastapiproject.routers.product_router.get_database&quot;)&#10;async def test_get_all_product(mock_get_db, mock_db):&#10;    product = [&#10;        {&quot;id&quot;: &quot;1&quot;, &quot;name&quot;: &quot;Alice&quot;, &quot;description&quot;: &quot;desc1&quot;, &quot;price&quot;: 1.0},&#10;        {&quot;id&quot;: &quot;2&quot;, &quot;name&quot;: &quot;Bob&quot;, &quot;description&quot;: &quot;desc2&quot;, &quot;price&quot;: 2.0}&#10;    ]&#10;    async def fake_find():&#10;        for c in product:&#10;            yield c&#10;    mock_db[&quot;products&quot;].find = fake_find&#10;    mock_get_db.return_value = mock_db&#10;    transport = ASGITransport(app=app)&#10;    # Send GET request to retrieve all products&#10;    async with AsyncClient(transport=transport, base_url=&quot;http://test&quot;) as ac:&#10;        response = await ac.get(&quot;/products&quot;)&#10;    assert response.status_code == 200  # Expect HTTP 200 OK&#10;    data = response.json()&#10;    assert len(data) == 2  # Should return two products&#10;    assert data[0][&quot;name&quot;] == &quot;Alice&quot;  # Check first product's name&#10;    assert data[1][&quot;name&quot;] == &quot;Bob&quot;    # Check second product's name&#10;&#10;# Test for successful product deletion via DELETE /product/{id}&#10;@pytest.mark.anyio&#10;@patch(&quot;fastapiproject.routers.product_router.get_database&quot;)&#10;async def test_delete_product_success(mock_get_db, mock_db):&#10;    # Simulate successful deletion (deleted_count = 1)&#10;    mock_result = AsyncMock()&#10;    mock_result.deleted_count = 1&#10;    mock_db[&quot;products&quot;].delete_one = AsyncMock(return_value=mock_result)&#10;    mock_get_db.return_value = mock_db  # Patch DB connection&#10;    transport = ASGITransport(app=app)&#10;    # Send DELETE request for product with id '1'&#10;    async with AsyncClient(transport=transport, base_url=&quot;http://test&quot;) as ac:&#10;        response = await ac.delete(&quot;/products/1&quot;)&#10;    assert response.status_code == 204  # Expect HTTP 204 No Content&#10;&#10;# Test for product not found during deletion via DELETE /product/{id}&#10;@pytest.mark.anyio&#10;@patch(&quot;fastapiproject.routers.product_router.get_database&quot;)&#10;async def test_delete_product_not_found(mock_get_db, mock_db):&#10;    # Simulate not found (deleted_count = 0)&#10;    mock_result = AsyncMock()&#10;    mock_result.deleted_count = 0&#10;    mock_db[&quot;products&quot;].delete_one = AsyncMock(return_value=mock_result)&#10;    mock_get_db.return_value = mock_db  # Patch DB connection&#10;    transport = ASGITransport(app=app)&#10;    # Send DELETE request for non-existent product id '999'&#10;    async with AsyncClient(transport=transport, base_url=&quot;http://test&quot;) as ac:&#10;        response = await ac.delete(&quot;/products/999&quot;)&#10;    assert response.status_code == 404  # Expect HTTP 404 Not Found&#10;    assert response.json()[&quot;detail&quot;] == &quot;Not Found&quot;  # Check error message&#10;" />
              <option name="updatedContent" value="import sys&#10;import asyncio&#10;if sys.platform.startswith(&quot;win&quot;):&#10;    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())&#10;&#10;import pytest&#10;import asyncio&#10;from httpx import AsyncClient, ASGITransport&#10;from unittest.mock import AsyncMock, patch&#10;from fastapiproject.main import app&#10;&#10;@pytest.fixture&#10;def anyio_backend():&#10;    return 'asyncio'&#10;&#10;@pytest.fixture&#10;def mock_db():&#10;    mock_collection = AsyncMock()&#10;    mock_collection.insert_one = AsyncMock(return_value=None)&#10;    mock_collection.find = AsyncMock()&#10;    mock_db = {&quot;products&quot;: mock_collection}&#10;    return mock_db&#10;&#10;@pytest.mark.anyio&#10;@patch(&quot;fastapiproject.routers.product_router.get_database&quot;)&#10;async def test_create_product(mock_get_db, mock_db):&#10;    mock_get_db.return_value = mock_db&#10;    product_data = {&#10;        &quot;name&quot;: &quot;John Doe&quot;,&#10;        &quot;description&quot;: &quot;A sample product&quot;,&#10;        &quot;price&quot;: 9.99&#10;    }&#10;    transport = ASGITransport(app=app)&#10;    async with AsyncClient(transport=transport, base_url=&quot;http://test&quot;) as ac:&#10;        response = await ac.post(&quot;/products&quot;, json=product_data)&#10;    assert response.status_code == 201&#10;    data = response.json()&#10;    assert data[&quot;name&quot;] == product_data[&quot;name&quot;]&#10;    assert &quot;id&quot; in data&#10;&#10;@pytest.mark.anyio&#10;@patch(&quot;fastapiproject.routers.product_router.get_database&quot;)&#10;async def test_get_all_product(mock_get_db, mock_db):&#10;    product = [&#10;        {&quot;id&quot;: &quot;1&quot;, &quot;name&quot;: &quot;Alice&quot;, &quot;description&quot;: &quot;desc1&quot;, &quot;price&quot;: 1.0},&#10;        {&quot;id&quot;: &quot;2&quot;, &quot;name&quot;: &quot;Bob&quot;, &quot;description&quot;: &quot;desc2&quot;, &quot;price&quot;: 2.0}&#10;    ]&#10;    async def fake_find():&#10;        for c in product:&#10;            yield c&#10;    mock_db[&quot;products&quot;].find = fake_find&#10;    mock_get_db.return_value = mock_db&#10;    transport = ASGITransport(app=app)&#10;    # Send GET request to retrieve all products&#10;    async with AsyncClient(transport=transport, base_url=&quot;http://test&quot;) as ac:&#10;        response = await ac.get(&quot;/products&quot;)&#10;    assert response.status_code == 200  # Expect HTTP 200 OK&#10;    data = response.json()&#10;    assert len(data) == 2  # Should return two products&#10;    assert data[0][&quot;name&quot;] == &quot;Alice&quot;  # Check first product's name&#10;    assert data[1][&quot;name&quot;] == &quot;Bob&quot;    # Check second product's name&#10;&#10;# Test for successful product deletion via DELETE /product/{id}&#10;@pytest.mark.anyio&#10;@patch(&quot;fastapiproject.routers.product_router.get_database&quot;)&#10;async def test_delete_product_success(mock_get_db, mock_db):&#10;    # Simulate successful deletion (deleted_count = 1)&#10;    mock_result = AsyncMock()&#10;    mock_result.deleted_count = 1&#10;    mock_db[&quot;products&quot;].delete_one = AsyncMock(return_value=mock_result)&#10;    mock_get_db.return_value = mock_db  # Patch DB connection&#10;    transport = ASGITransport(app=app)&#10;    # Send DELETE request for product with id '1'&#10;    async with AsyncClient(transport=transport, base_url=&quot;http://test&quot;) as ac:&#10;        response = await ac.delete(&quot;/products/1&quot;)&#10;    assert response.status_code == 204  # Expect HTTP 204 No Content&#10;&#10;# Test for product not found during deletion via DELETE /product/{id}&#10;@pytest.mark.anyio&#10;@patch(&quot;fastapiproject.routers.product_router.get_database&quot;)&#10;async def test_delete_product_not_found(mock_get_db, mock_db):&#10;    # Simulate not found (deleted_count = 0)&#10;    mock_result = AsyncMock()&#10;    mock_result.deleted_count = 0&#10;    mock_db[&quot;products&quot;].delete_one = AsyncMock(return_value=mock_result)&#10;    mock_get_db.return_value = mock_db  # Patch DB connection&#10;    transport = ASGITransport(app=app)&#10;    # Send DELETE request for non-existent product id '999'&#10;    async with AsyncClient(transport=transport, base_url=&quot;http://test&quot;) as ac:&#10;        response = await ac.delete(&quot;/products/999&quot;)&#10;    assert response.status_code == 404  # Expect HTTP 404 Not Found&#10;    assert response.json()[&quot;detail&quot;] == &quot;Product not found&quot;  # Check error message" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>